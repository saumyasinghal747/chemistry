{"version":3,"sources":["calculations/Definitions.ts","TopNav.tsx","calculators/chemistry/SpecificHeat.tsx","App.tsx","reportWebVitals.ts","index.tsx","calculations/SpecificHeat.ts"],"names":["transitionTemps","temps","melting","boiling","this","MissingInformationError","params","Error","captureStackTrace","name","TopNav","useState","collapseOpen","setCollapseOpen","dropdownOpen","setDropdownOpen","type","theme","expand","to","className","onClick","open","navbar","toggle","nav","caret","renderResult","heats","transitions","masses","a","energyRequired","grams","molar","error","energy","SpecificHeat","solid","fusion","liquid","vaporization","gas","setHeats","setHeat","key","value","Object","assign","setTemps","setTemp","setTransitions","setTransition","setMasses","setMass","onChange","e","target","id","placeholder","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","startTemp","endTemp","states","specificHeat","molarMass","dir","tmps","getTemps","push","sort","startIndex","indexOf","endIndex","slice","traverseTemps","c","message","require","module","console","log"],"mappings":"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","file":"static/js/main.eceacdb0.chunk.js","sourcesContent":["export interface heatValues {\n    solid:number|null,\n    fusion:number|null,\n    liquid:number|null,\n    vaporization:number|null,\n    gas:number|null\n}\nexport class transitionTemps {\n    melting:number;\n    boiling:number;\n    //ionizing:number|null // hmm will i ever use this\n    constructor(temps:{melting:number, boiling:number}) {\n        this.melting =  temps.melting;\n        this.boiling = temps.boiling;\n        //this.ionizing = temps.ionizing || null; // ionization temperature is never 0, nothing is plasma at room temperature\n    }\n    getTemps():Array<number> {\n        return [this.melting, this.melting, this.boiling, this.boiling]\n    }\n}\n\n\nexport class MissingInformationError extends Error {\n    constructor(...params: any[]) {\n        super(...params);\n        // Maintains proper stack trace for where our error was thrown (only available on V8)\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, MissingInformationError)\n        }\n\n        this.name = 'MissingInformationError'\n    }\n}","import React, { useState }  from 'react';\nimport {\n    Navbar, //NavbarBrand,\n    NavbarToggler,\n    Nav,\n    NavItem,\n    NavLink,\n    Collapse,\n    Dropdown,\n    DropdownToggle,\n    DropdownItem,\n    DropdownMenu\n} from \"shards-react\";\nimport {\n    Link\n} from \"react-router-dom\";\nexport default function TopNav() {\n    const [collapseOpen, setCollapseOpen] = useState(false);\n    const toggleNavbar  =  ()=>{setCollapseOpen(!collapseOpen);}\n    const [dropdownOpen, setDropdownOpen] = useState(false);\n    const toggleDropdown = ()=>{setDropdownOpen(!dropdownOpen);}\n    return (\n        <Navbar  type=\"dark\" theme=\"primary\" expand=\"md\">\n\n                <Link to=\"/\" className=\"navbar-brand\">Saumya's Chemistry Toolbox</Link>\n\n            <NavbarToggler onClick={toggleNavbar}/>\n            <Collapse open={collapseOpen} navbar>\n                <Nav navbar>\n                    <NavItem>\n                            <Link className=\"nav-link active\" to=\"/calculators/specific-heat\">\n                                Specific Heat\n                            </Link>\n                    </NavItem>\n                    <NavItem>\n                        <NavLink to=\"/calculators/physics/range\">\n                            Projectile Range\n                        </NavLink>\n                    </NavItem>\n                    <Dropdown\n                        open={dropdownOpen}\n                        toggle={toggleDropdown}\n                    >\n                        <DropdownToggle nav caret>\n                            Dropdown\n                        </DropdownToggle>\n                        <DropdownMenu>\n                            <DropdownItem>Action</DropdownItem>\n                            <DropdownItem>Another action</DropdownItem>\n                            <DropdownItem>Something else here</DropdownItem>\n                        </DropdownMenu>\n                    </Dropdown>\n                </Nav>\n            </Collapse>\n        </Navbar>\n\n    )\n}","import React, { useState }  from 'react';\nimport { Form, FormInput, FormGroup, Card, CardBody, Alert} from \"shards-react\";\nimport {heatValues, transitionTemps} from \"../../calculations/Definitions\";\nimport {energyRequired} from \"../../calculations/SpecificHeat\";\n\nfunction renderResult(heats:heatValues, temps:{melting:number, boiling:number}, transitions:[number,number],masses:{grams:number, molar:number}){\n    const a  = energyRequired(transitions[0], transitions[1], masses.grams, new transitionTemps(temps), heats, masses.grams/masses.molar );\n    if (a.error){\n        return (\n            <Alert theme=\"danger\">\n                {a.error}\n            </Alert>\n        )\n    }\n    return (\n        <div>\n            {a.energy}\n        </div>\n    )\n}\n\nexport default function SpecificHeat(){\n    const [heats, setHeats] = useState({\n        solid:null,\n        fusion:null,\n        liquid:null,\n        vaporization:null,\n        gas:null\n    })\n    const setHeat = (key:string,value:number)=>{\n        let a: { [index: string]:number } = {};\n        Object.assign(a,heats);\n        a[key] = value;\n        // @ts-ignore\n        setHeats(a);\n    }\n    const [temps, setTemps] = useState({\n        melting:null,\n        boiling:null\n    })\n    const setTemp = (key:string,value:number)=>{\n        let a: { [index: string]:number } = {};\n        Object.assign(a,temps);\n        a[key] = value;\n        // @ts-ignore\n        setTemps(a);\n    }\n    const [transitions, setTransitions] = useState([null,null])\n    const setTransition = (key:string,value:number)=>{\n        let a: { [index: string]:number } = {};\n        Object.assign(a,transitions);\n        a[key] = value;\n        // @ts-ignore\n        setTransitions(a);\n    }\n    const [masses, setMasses] = useState({\n        grams:null,\n        molar:null\n    })\n    const setMass = (key:string,value:number)=>{\n        let a: { [index: string]:number } = {};\n        Object.assign(a,masses);\n        a[key] = value;\n        // @ts-ignore\n        setMasses(a);\n    }\n    //const [error, setError] = useState(null);\n    const [energy, setEnergy] = useState({});\n    // @ts-ignore\n    // @ts-ignore\n    // @ts-ignore\n    return (\n        <div className=\"container pt-5\">\n            <h1>Energy Calculator</h1>\n            <hr/>\n\n            <Card className=\"my-2\">\n                <CardBody  className=\"row\">\n                    <h3>Specific Heats</h3>\n                <div className=\"col mx-2\">\n            <Form>\n\n                <FormGroup>\n                    <label >Solid</label>\n                    <FormInput value={heats.solid} onChange={(e:any)=>setHeat('solid',e.target.value)} type=\"number\" id=\"#solid\" placeholder=\"Solid\" />\n                </FormGroup>\n                <FormGroup>\n                    <label >Liquid</label>\n                    <FormInput value={heats.liquid} onChange={(e:any)=>setHeat('liquid',e.target.value)} type=\"number\"  placeholder=\"Liquid\" />\n                </FormGroup>\n                <FormGroup>\n                    <label >Gas</label>\n                    <FormInput value={heats.gas} onChange={(e:any)=>setHeat('gas',e.target.value)} type=\"number\"  placeholder=\"Gas\" />\n                </FormGroup>\n            </Form>\n                </div>\n                <div className=\"col mx-2\">\n                        <Form>\n                            <FormGroup>\n                                <label >Fusion</label>\n                                <FormInput value={heats.fusion} onChange={(e:any)=>setHeat('fusion',e.target.value)} type=\"number\"  placeholder=\"Liquid\" />\n                            </FormGroup>\n                            <FormGroup>\n                                <label>Vaporization</label>\n                                <FormInput  value={heats.vaporization} onChange={(e:any)=>setHeat('vaporization',e.target.value)} type=\"number\" placeholder=\"Vaporization\" />\n                            </FormGroup>\n                        </Form>\n                    </div>\n                </CardBody>\n                </Card>\n\n            <Card className=\"my-2\">\n            <CardBody>\n                <h3>Phase Changes</h3>\n                <Form className=\"row\">\n                    <FormGroup className=\"col mx-2\">\n                        <label >Melting</label>\n                        <FormInput value={temps.melting} onChange={(e:any)=>setTemp('melting',e.target.value)} type=\"number\"  placeholder=\"Melting\" />\n                    </FormGroup>\n                    <FormGroup className=\"col mx-2\">\n                        <label>Boiling</label>\n                        <FormInput  value={temps.boiling} onChange={(e:any)=>setTemp('boiling',e.target.value)} type=\"number\" placeholder=\"Boiling\" />\n                    </FormGroup>\n                </Form>\n            </CardBody>\n            </Card>\n            <Card className=\"my-2\">\n                <CardBody>\n                    <h3>Mass</h3>\n                    <Form className=\"row\">\n                        <FormGroup className=\"col mx-2\">\n                            <label >Grams</label>\n                            <FormInput value={masses.grams} onChange={(e:any)=>setMass('grams',e.target.value)} type=\"number\"  placeholder=\"Grams\" />\n                        </FormGroup>\n                        <FormGroup className=\"col mx-2\">\n                            <label>Molar</label>\n                            <FormInput  value={masses.molar} onChange={(e:any)=>setMass('molar',e.target.value)} type=\"number\" placeholder=\"Molar\" />\n                        </FormGroup>\n                    </Form>\n                </CardBody>\n            </Card>\n            <Card className=\"my-2\">\n                <CardBody>\n                    <h3>Temperature Change</h3>\n                    <Form className=\"row\">\n                        <FormGroup className=\"col mx-2\">\n                            <label >Starting</label>\n                            <FormInput value={transitions[0]} onChange={(e:any)=>setTransition('0',e.target.value)} type=\"number\"  placeholder=\"Starting\" />\n                        </FormGroup>\n                        <FormGroup className=\"col mx-2\">\n                            <label>Ending</label>\n                            <FormInput  value={transitions[1]} onChange={(e:any)=>setTransition('1',e.target.value)} type=\"number\" placeholder=\"Ending\" />\n                        </FormGroup>\n                    </Form>\n                </CardBody>\n            </Card>\n\n            <div className=\"container py-4 \">\n                {\n                    //@ts-ignore\n                    renderResult(heats, temps, transitions, masses)}\n            </div>\n\n        </div>\n    )\n}","import React from 'react';\nimport TopNav from \"./TopNav\";\nimport {\n    //Navbar\n} from \"shards-react\";\nimport \"./css/utilities.css\"\nimport \"./css/grid.css\"\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"shards-ui/dist/css/shards.min.css\"\n\nimport {\n    HashRouter as Router,\n    Switch,\n    Route\n} from \"react-router-dom\";\nimport SpecificHeat from \"./calculators/chemistry/SpecificHeat\";\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n          <Router>\n              <TopNav></TopNav>\n          <Switch>\n              <Route path=\"/calculators/specific-heat\">\n                  <SpecificHeat/>\n              </Route>\n              <Route path=\"users\">\n                  {/*<About/>*/}\n              </Route>\n              <Route path=\"/\">\n                  {/*<About/>*/}\n              </Route>\n          </Switch>\n      </Router>\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import {heatValues, MissingInformationError, transitionTemps} from \"./Definitions\";\n\n\nfunction energyRequired(\n    startTemp:number,\n    endTemp: number,\n    grams:number,\n    states:transitionTemps,\n    specificHeat:heatValues,\n    molarMass:number|null) : { energy?:number, error?:string } {\n\n    // so we have all the information that we need. Now we need a bunch of if statements.\n    // can we do this efficiently?\n    // we need to calculate starting from the starting value.\n    // So insert the two temperatures into an array along with the melting and boiling temperatures, then\n    // find the index of the starting and ending, chop off the ends, start the calculations\n\n    if (startTemp===endTemp) return {energy:0}; //no energy needed to do nothing, don't waste computation\n\n\n    // insert all the temperatures into one array\n    let dir;\n    if (startTemp < endTemp){\n        // temperature going up\n        dir  = 1;\n    }\n    else {\n        // temperature going down\n        dir  = -1;\n        //i ❤️ javascript for this reason\n        [startTemp,endTemp] = [endTemp,startTemp];\n    }\n    let tmps : Array<number>  = states.getTemps();\n    tmps.push(startTemp, endTemp);\n    // sort it!\n    tmps.sort();\n    const startIndex = tmps.indexOf(startTemp);\n    const endIndex = tmps.indexOf(endTemp);\n    // chop off the ends\n    let temps = tmps.slice(startIndex,endIndex+1);\n\n    // ok....\n\n    //console.log(temps);\n    function traverseTemps(temps: Array<number>):number{\n        // so we check if the second temp is our ending temperature is the second element. if it is, then we need to find out what phase we're in\n        if (temps[1]===endTemp){\n            // find out what phase we're in and calculate the specific heat\n            let c:number;\n            if (tmps[endIndex+1]===states.melting){\n                // use the solid\n                if (!specificHeat.solid) throw new MissingInformationError('Specific heat missing for solid state');\n                c =  specificHeat.solid;\n            }\n            else if (tmps[endIndex+1]===states.boiling){\n                // liquid\n                if (!specificHeat.liquid) throw new MissingInformationError('Specific heat missing for liquid state');\n                c =  specificHeat.liquid;\n            }\n            else {\n                // gas\n                if (!specificHeat.gas) throw new MissingInformationError('Specific heat missing for gas state');\n                c =  specificHeat.gas;\n            }\n            //console.log(`Calculating ${c} x ${grams} x ${temps[1]-temps[0]}`)\n            return c*grams*(temps[1]-temps[0]);\n\n        }\n        else {\n            // recursive process\n            // find the first segment\n            // is the first one the start temp, if not, we need to use a different equation\n            if (temps[0]!==temps[1]){\n                let c:number;\n                if (temps[1]===states.melting){\n                    // use the solid\n                    if (!specificHeat.solid) throw new MissingInformationError('Specific heat missing for solid state');\n                    c =  specificHeat.solid;\n                }\n                else if (temps[1]===states.boiling){\n                    // liquid\n                    if (!specificHeat.liquid) throw new MissingInformationError('Specific heat missing for liquid state');\n                    c =  specificHeat.liquid;\n                }\n                else { // it must be ionization???\n                    // gas\n                    if (!specificHeat.gas) throw new MissingInformationError('Specific heat missing for gas state');\n                    c =  specificHeat.gas;\n                }\n                //console.log(`Calculating ${c} x ${grams} x ${temps[1]-temps[0]}`)\n                return c*grams*(temps[1]-temps[0]) + traverseTemps(temps.slice(1));\n\n            }\n            else {\n\n                // we are caught in between two phase changes.\n\n                // we are going to need the molar mass.\n\n                if (!molarMass) throw new MissingInformationError('Molar mass missing for substance');\n\n                // find out what the first one is\n                let c:number;\n                if (temps[0]===states.melting){\n                    if (!specificHeat.fusion) throw new MissingInformationError('Specific heat missing for fusion transition');\n                    c =  specificHeat.fusion;\n                    // so we're going from liquid to gas, then [melting, boiling]\n                }\n                else {\n                    // are we ever going to come here?\n                    //\n                    if (!specificHeat.vaporization) throw new MissingInformationError('Specific heat missing for vaporization transition');\n                    c =  specificHeat.vaporization;\n                }\n                // uhh mass divided by molar mass times c?\n                // kJ to J\n                //console.log(`Calculating ${c} x 1000 x ${grams} / ${molarMass}`)\n                return c*1000*grams/molarMass  + traverseTemps(temps.slice(1));\n            }\n        }\n    }\n\n    try {\n        return {energy: dir * traverseTemps(temps)};\n    }\n    catch (e:any){\n        return {\n            error:e.message\n        }\n    }\n\n\n}\n\nexport {energyRequired}\n\nif (require.main === module) {\n    // testing\n    console.log('================================\\n')\n    console.log(energyRequired(\n        140,\n        -30,\n        36.04,\n        new transitionTemps({melting:0,boiling:100}),\n        {\n            solid:2.06,\n            fusion:6.01,\n            liquid:4.18,\n            vaporization:40.7,\n            gas:1.87\n        },\n        18.02\n    ))\n}"],"sourceRoot":""}